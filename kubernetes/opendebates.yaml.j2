apiVersion: v1
kind: Secret
metadata:
  name: "opendebates-secrets"
  labels:
    app: "opendebates"
  namespace: "{{ NAMESPACE }}"
type: Opaque
stringData:
  DATABASE_URL: "{{ DATABASE_URL }}"
  DEFAULT_FROM_EMAIL: "{{ DEFAULT_FROM_EMAIL }}"
  DJANGO_SETTINGS_MODULE: opendebates.kube_settings
  DEPLOYMENT_TAG: "{{ ENVIRONMENT }}"
  ALLOWED_HOSTS: "{{ DOMAIN_NAMES|join(",") }}"
  EMAIL_HOST: "{{ EMAIL_HOST }}"
  EMAIL_HOST_USER: "{{ EMAIL_HOST_USER }}"
  EMAIL_HOST_PASSWORD: "{{ EMAIL_HOST_PASSWORD }}"
  ENVIRONMENT: "{{ ENVIRONMENT }}"
  REDIS_HOST: redis
  MEMCACHED_HOST: memcached
  NORECAPTCHA_SITE_KEY: "{{ NORECAPTCHA_SITE_KEY }}"
  NORECAPTCHA_SECRET_KEY: "{{ NORECAPTCHA_SECRET_KEY }}"
  USE_CAPTCHA: "{{ USE_CAPTCHA }}"
  MIXPANEL_KEY: "{{ MIXPANEL_KEY }}"
{% if DBBACKUP_STORAGE is defined %}
  DBBACKUP_FILENAME_TEMPLATE: "{{ DBBACKUP_FILENAME_TEMPLATE }}"
  DBBACKUP_STORAGE: "{{ DBBACKUP_STORAGE }}"
  DBBACKUP_STORAGE_OPTIONS_GS_BUCKET_NAME: "{{ DBBACKUP_STORAGE_OPTIONS_GS_BUCKET_NAME }}"
{% endif %}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "opendebates"
  namespace: "{{ NAMESPACE }}"
spec:
  selector:
    matchLabels:
      app: "opendebates"
  replicas: {{ OPENDEBATES_REPLICAS }}
  template:
    metadata:
      labels:
        app: "opendebates"
    spec:
      containers:
      - name: "opendebates"
        image: "{{ OPENDEBATES_IMAGE }}:{{ OPENDEBATES_VERSION }}"
        imagePullPolicy: IfNotPresent
        env:
        - name: GET_HOSTS_FROM
          value: dns
        envFrom:
        - secretRef:
            name: "opendebates-secrets"
        ports:
        - containerPort: 8000
        resources:
          # We must have a request set for any resource we want to track metrics on.
          # We need to monitor CPU in order to use it for autoscaling.
          # We might not need to specify memory for that, but it seems like a good
          # idea rather than just letting K8S guess or whatever it does when we don't
          # give it any clue.
          requests:
            # Requesting 150Mi is just a first approximation, based on one mostly
            # idle container currently using around 130Mi.
            memory: "150Mi"
            # This CPU request is just a wild guess
            # because we haven't done any load testing and I have no idea how much
            # CPU we might actually use when busy.
            cpu: "500m"
          limits:
            memory: "250Mi"
            cpu: "500m"
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ RUN_AS_USER_ID }}
        runAsGroup: {{ RUN_AS_GROUP_ID }}
---
apiVersion: v1
kind: Service
metadata:
  name: "opendebates"
  labels:
    app: "opendebates"
  namespace: "{{ NAMESPACE }}"
spec:
  ports:
  - protocol: TCP
    # Where other things in the cluster should try to connect to our application
    port: 80
    # Where our application is listening:
    targetPort: 8000
  selector:
    app: "opendebates"
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: "opendebates"
  namespace: "{{ NAMESPACE }}"
  annotations:
    kubernetes.io/ingress.class: nginx
    certmanager.k8s.io/cluster-issuer: "letsencrypt-production"
    nginx.ingress.kubernetes.io/backend-protocol: "{{ CONTAINER_PROTOCOL }}"
spec:
  tls:
  - hosts:
{% for domain in DOMAIN_NAMES %}
    - "{{ domain }}"
{% endfor %}
    secretName: "{{ ENVIRONMENT }}-tls"
  rules:
{% for domain in DOMAIN_NAMES %}
  - host: "{{ domain }}"
    http:
      paths:
      - path: "/"
        backend:
          serviceName: "opendebates"
          servicePort: 80
{% endfor %}
{% if AUTOSCALE is defined %}
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: "opendebates-autoscaler"
  namespace: "{{ NAMESPACE }}"
spec:
  maxReplicas: {{ AUTOSCALE['max'] }}
  minReplicas: {{ AUTOSCALE['min'] }}
  metrics:
  - 'type': Resource
    resource:
      name: cpu
      # target percentage of requested CPU
      targetAverageUtilization: {{ AUTOSCALE['cpu-percent'] }}
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: "opendebates"
{% endif %}
