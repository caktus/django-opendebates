{% if VOLUME_NAME is defined %}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ VOLUME_NAME }}-claim
  namespace: "{{ NAMESPACE }}"
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: {{ VOLUME_SIZE }}
---
{% endif %}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ APP_NAME }}"
  namespace: "{{ NAMESPACE }}"
spec:
  selector:
    matchLabels:
      app: "{{ APP_NAME }}"
  replicas: {{ CONTAINER_REPLICAS }}
  template:
    metadata:
      labels:
        app: "{{ APP_NAME }}"
    spec:
      containers:
      - name: "{{ APP_NAME }}"
        image: "{{ CONTAINER_IMAGE_REPO }}:{{ CONTAINER_IMAGE_TAG }}"
        imagePullPolicy: Always
        env:
        - name: GET_HOSTS_FROM
          value: dns
        envFrom:
{% for SECRET_NAME in SECRET_NAMES %}
        - secretRef:
            name: "{{ SECRET_NAME }}"
{% endfor %}
{% for CFG in CONFIG_MAP_NAMES %}
        - configMapRef:
            name: {{ CFG }}
{% endfor %}
        ports:
        - containerPort: {{ CONTAINER_PORT }}
{% if VOLUME_NAME is defined %}
        volumeMounts:
          - mountPath: {{ VOLUME_MOUNT }}
            name: {{ VOLUME_NAME }}
{% endif %}
{% if VOLUME_NAME is defined %}
      volumes:
        - name: {{ VOLUME_NAME }}
          persistentVolumeClaim:
            claimName: {{ VOLUME_NAME }}-claim
{% endif %}
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ APP_NAME }}"
  labels:
    app: "{{ APP_NAME }}"
  namespace: "{{ NAMESPACE }}"
spec:
{% if IS_LOADBALANCER %}
  type: LoadBalancer
{% endif %}
  ports:
  - protocol: TCP
    # Where other things in the cluster should try to connect to our application
    port: {{ SERVICE_PORT }}
    # Where our application is listening:
    targetPort: {{ CONTAINER_PORT }}
  selector:
    app: "{{ APP_NAME }}"
{% if DOMAIN_NAME is defined %}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: "{{ APP_NAME }}"
  namespace: "{{ NAMESPACE }}"
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.org/mergeable-ingress-type: minion
    nginx.ingress.kubernetes.io/backend-protocol: "{{ CONTAINER_PROTOCOL }}"
spec:
  rules:
  - host: "{{ DOMAIN_NAME }}"
    http:
      paths:
      - path: "{{ CONTAINER_URL_PATH }}"
        backend:
          serviceName: "{{ APP_NAME }}"
          servicePort: {{ SERVICE_PORT }}
{% endif %}
